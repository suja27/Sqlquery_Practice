Create table mountain_huts 
(
	id 			integer not null unique,
	name 		varchar(40) not null unique,
	altitude 	integer not null
);
insert into mountain_huts values (1, 'Dakonat', 1900);
insert into mountain_huts values (2, 'Natisa', 2100);
insert into mountain_huts values (3, 'Gajantut', 1600);
insert into mountain_huts values (4, 'Rifat', 782);
insert into mountain_huts values (5, 'Tupur', 1370);

drop table if exists trails;
create table trails 
(
	hut1 		integer not null,
	hut2 		integer not null
);
insert into trails values (1, 3);
insert into trails values (3, 2);
insert into trails values (3, 5);
insert into trails values (4, 5);
insert into trails values (1, 5);

Sql problem 
Each entry in the table trails represents a direct connection between huts with IDs hut1 and
hut2. Note that all trails are bidirectional.
Create a query that finds all triplets(startpt,middlept,endpt) representing the mountain huts
that may be used for construction of a ski slope.

with cte as
(select  id,name,  b.hut1 as start_point ,altitude, b.hut2 as end_point  from mountain_huts a
inner join trails b on a.id = b.hut1),
 cte2  as(select  c.*,c.name as stat_hutname , h2.name as End_hutname,  case when  c.altitude > h2.altitude then 1 else 0 end as flag from cte c
inner join mountain_huts h2  on h2.id = c.end_point),
  cte3 as(select  cte2.*,
 case when flag = 1 then start_point else end_point end  start_Point1,
 case when flag = 1 then stat_hutname else end_hutname end  start_hutName,
 case when flag = 1 then end_point else start_point end  end_point1,
 case when flag = 1 then end_hutName else stat_hutname end  End_hutName1
  from cte2) 
  select c3.start_hutName, c3.End_hutName1 as Middle_point,  c4.End_hutName1 from cte3 c3
  inner join cte3 c4 on c3.end_point1 = c4.start_Point1
  
